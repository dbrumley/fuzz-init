# Template metadata for C++ fuzzing project
[template]
name = "CPP"
description = "C++ fuzzing"
version = "1.0.0"

# Template variables with defaults
[variables]
project_name = { required = true, description = "Name of the fuzzing project" }
target_name = { default = "target1", description = "Name of the fuzz target" }


# Supported integration types
[integrations]
#supported = ["script", "make", "cmake"]
supported = ["make", "cmake"]
default = "make"

[[integrations.options]]
name = "make"
description = "Makefile-based build system integration"


[[integrations.options]]
name = "script"
description = "Self-contained fuzzing setup with build.sh script"


[[integrations.options]]
name = "cmake"
description = "CMake-based build system integration"


# File conventions - smart defaults based on directory and extension
[file_conventions]
# Directories always included (core fuzz files)
always_include = ["fuzz"]

# Directories only in full mode (tutorial/example content)
full_mode_only = ["src", "include", "test", "test_data"]

# File extensions that should be templated
template_extensions = [".cpp", ".hpp", ".c", ".h", ".md", ".sh", ".txt"]


# File extensions that should not be templated
no_template_extensions = [".dict", ".bin"]

# Integration-specific files
[[files]]
path = "fuzz/build.sh"
condition = "integration == 'script'"
executable = true

[[files]]
path = "fuzz/Makefile"
condition = "integration == 'make'"

[[files]]
path = "fuzz/CMakeLists.txt"
condition = "integration == 'cmake'"

[[files]]
path = "cmake/Fuzzing.cmake"
condition = "integration == 'cmake'"


# Root-level build files (full mode only)
[[files]]
path = "Makefile"
condition = "integration == 'make' && minimal == false"

[[files]]
path = "CMakeLists.txt"
condition = "integration == 'cmake' && minimal == false"

[[files]]
path = "build.sh"
condition = "integration == 'script' && minimal == false"
executable = true

[[files]]
path = "CMakePresets.json"
condition = "integration == 'cmake' && minimal == false"


[[files]]
path = "fuzz/CMakePresets.json"
condition = "integration == 'cmake' && minimal == true"


# Dictionary files - template filename but not content
[[files]]
path = "fuzz/dictionaries/fuzz_harness.dict"
template = true

# Root-level tutorial files (full mode only)
[[files]]
path = "TUTORIAL.md"
condition = "minimal == false" 

[[files]]
path = "fuzz.sh"
condition = "minimal == false" 
executable = true 

# Directory creation rules
[[directories]]
path = "fuzz/testsuite/fuzz_harness_1"
create_empty = true  # Create empty directory for corpus files



# Post-generation message
[post_generation_message]
content = """
To Be done. 
"""

# Post-generation hooks (optional future feature)
[hooks]
# post_generate = ["chmod +x fuzz/build.sh"]

# Validation commands for dev-mode testing
[validation]

# CMake with presets (full mode)
[[validation.commands]]
name = "build-cmake-preset-full"
condition = "integration == 'cmake' && minimal == false"
dir = "{{project_dir}}"
steps = [
    ["cmake", "--preset", "fuzz-libfuzzer"],
    ["cmake", "--build", "--preset", "fuzz-libfuzzer"]
]

# CMake with presets (minimal mode)
[[validation.commands]]
name = "build-cmake-preset-minimal"
condition = "integration == 'cmake' && minimal == true"
dir = "{{project_dir}}/fuzz"
steps = [
    ["cmake", "--preset", "fuzz-libfuzzer"],
    ["cmake", "--build", "--preset", "fuzz-libfuzzer"]
]

# Make (full mode)
[[validation.commands]]
name = "build-make-full"
condition = "integration == 'make' && minimal == false"
dir = "{{project_dir}}"
steps = [
    ["make"],
    ["make", "fuzz"]
]

# Make (minimal mode)
[[validation.commands]]
name = "build-make-minimal"
condition = "integration == 'make' && minimal == true"
dir = "{{project_dir}}/fuzz"
steps = [
    ["make"]
]