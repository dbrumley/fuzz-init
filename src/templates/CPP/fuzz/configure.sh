#!/bin/bash
# Auto-configuration script for {{project_name}} fuzzing
# Generated by fuzz-init for {{default_fuzzer}} with {{integration}} integration

set -e

echo "🔧 Configuring fuzzing for {{project_name}}..."
echo ""

# Determine script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
cd "$SCRIPT_DIR"

# Function to create demo library for testing
create_demo_library() {
    echo "📚 Creating demo library for testing..."
    
    # Create temporary source files
    mkdir -p demo_lib
    
    cat > demo_lib/demo.cpp << 'EOF'
#include <cstring>
#include <cstdlib>

// Demo function with an intentional bug for fuzzing to find
extern "C" int demo_process(const char* input, size_t len) {
    if (len >= 3) {
        // Intentional bug: crashes on input "BUG"
        if (input[0] == 'B' && input[1] == 'U' && input[2] == 'G') {
            int* crash = nullptr;
            *crash = 42;  // Null pointer dereference
        }
        
        // Another bug: buffer overflow on long input
        if (len > 100) {
            char buffer[50];
            memcpy(buffer, input, len);  // Buffer overflow
        }
    }
    return 0;
}

// Additional demo function
extern "C" void demo_parse(const char* data, size_t size) {
    if (size > 0 && data[0] == 'P') {
        // Process something
        char* temp = (char*)malloc(size);
        if (temp) {
            memcpy(temp, data, size);
            // Intentional bug: double free on specific input
            if (size > 5 && memcmp(temp, "PARSE", 5) == 0) {
                free(temp);
                free(temp);  // Double free
            } else {
                free(temp);
            }
        }
    }
}
EOF

    # Compile the demo library
    echo "🔨 Compiling demo library..."
    ${CXX:-g++} -c demo_lib/demo.cpp -o demo_lib/demo.o
    ar rcs ../lib{{target_name}}.a demo_lib/demo.o
    
    echo "✅ Created demo library: ../lib{{target_name}}.a"
    echo ""
    echo "ℹ️  This is a demonstration library with intentional bugs for testing."
    echo "   It shows that your fuzzing setup is working correctly!"
    echo ""
    
    # Clean up temporary files
    rm -rf demo_lib
}

{{#if (eq integration "cmake")}}
# CMake Integration Setup
echo "📋 Setting up CMake build..."

# Create build directory
if [ ! -d "build" ]; then
    mkdir build
    echo "✓ Created build directory"
else
    echo "✓ Using existing build directory"
fi

cd build

# Configure CMake with parent project context
echo "🔍 Configuring CMake (this may take a moment)..."
{{#if (eq default_fuzzer "libfuzzer")}}
# Ensure we use clang++ for libFuzzer
export CC=clang
export CXX=clang++
echo "✓ Set compilers: CC=$CC, CXX=$CXX"
{{/if}}

# Run CMake configuration
cmake -S .. -B . || {
    echo ""
    echo "❌ CMake configuration failed!"
    echo ""
    echo "Common solutions:"
    echo "  1. Make sure your parent project has been configured:"
    echo "     cd .. && cmake -S . -B build"
    echo "  2. Check that required compilers are installed:"
{{#if (eq default_fuzzer "libfuzzer")}}
    echo "     - clang++ (required for libFuzzer)"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
    echo "     - afl-clang-fast++ (install AFL++)"
{{/if}}
    echo "  3. See INTEGRATION.md for detailed troubleshooting"
    echo ""
    exit 1
}

echo "✓ CMake configuration successful"

# Initial build to verify setup
echo ""
echo "🏗️ Building fuzzer to verify setup..."
TARGET_NAME="{{target_name}}_{{default_fuzzer}}"

cmake --build . --target "$TARGET_NAME" || {
    echo ""
    echo "❌ Build failed!"
    echo ""
    echo "This often indicates a sanitizer mismatch. Try:"
    echo "  1. Rebuild your main project with AddressSanitizer:"
    echo "     cd ../.. && cmake -S . -B build-asan -DCMAKE_CXX_FLAGS='-fsanitize=address -g'"
    echo "  2. Reconfigure this fuzzer to use the sanitizer build:"
    echo "     cmake -S .. -B . -DPARENT_BUILD_DIR=../../build-asan"
    echo "  3. See ../INTEGRATION.md for complete instructions"
    echo ""
    exit 1
}

echo "✓ Build successful: $TARGET_NAME"

{{else}}
# Makefile Integration Setup
echo "📋 Setting up Makefile build..."

# Check for any existing library
DETECTED_LIB=$(find .. -maxdepth 3 -name "lib*.a" ! -path "*/fuzz/*" ! -path "*/.git/*" 2>/dev/null | head -1)

if [ -n "$DETECTED_LIB" ]; then
    echo "✓ Found existing library: $DETECTED_LIB"
    USING_DEMO=false
else
    echo "ℹ️  No existing library found in parent directories"
    create_demo_library
    USING_DEMO=true
fi

# Build the fuzzer
echo ""
echo "🏗️ Building fuzzer..."
make clean 2>/dev/null || true  # Clean any previous builds, ignore errors
make {{default_fuzzer}} || {
    echo ""
    echo "❌ Build failed!"
    echo ""
    echo "Common solutions:"
    echo "  1. Ensure parent library was built with same compiler/flags"
    echo "  2. Check compiler availability:"
{{#if (eq default_fuzzer "libfuzzer")}}
    echo "     - clang++ (required for libFuzzer)"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
    echo "     - afl-clang-fast++ (install AFL++)"
{{/if}}
    echo "  3. See INTEGRATION.md for troubleshooting"
    echo ""
    exit 1
}

echo "✓ Build successful: {{target_name}}-{{default_fuzzer}}"
{{/if}}

# Final setup and guidance
echo ""
echo "✅ Setup complete!"
echo ""

{{#if (eq integration "make")}}
if [ "$USING_DEMO" = true ]; then
    echo "📚 Using demonstration library for testing"
    echo ""
    echo "🎯 Your fuzzer is working! Here's what to do next:"
    echo "  1. ✏️  Edit src/{{target_name}}.cpp to call YOUR library functions"
    echo "  2. 🔨 Build your actual library and place it in the parent directory"
    echo "  3. 🏃 Re-run this configure script to link with your library"
    echo ""
    echo "💡 The demo library has intentional bugs that fuzzers can find:"
    echo "   - Input 'BUG' causes a crash"
    echo "   - Input 'PARSE' causes a double-free"
    echo "   - Long inputs (>100 bytes) cause buffer overflow"
else
    echo "🔗 Linked with your library: $(basename $DETECTED_LIB)"
    echo ""
    echo "🎯 Next steps:"
    echo "  1. ✏️  Customize src/{{target_name}}.cpp to test your specific APIs"
    echo "  2. 🛡️  Ensure your library was built with matching sanitizer flags"
fi
{{else}}
echo "🎯 Your fuzzer is ready:"
echo "  📁 Binary: build/{{target_name}}_{{default_fuzzer}}"
echo "  🏃 Test run: ./{{target_name}}_{{default_fuzzer}} ../testsuite/"
echo ""
echo "🎯 Next steps:"
echo "  1. ✏️ Customize src/{{target_name}}.cpp for your API"
echo "  2. 🛡️ Consider rebuilding parent with sanitizers (see ../INTEGRATION.md)"
{{/if}}
{{#if (eq default_fuzzer "libfuzzer")}}
echo "  3. 🐛 Start fuzzing: {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}} ../testsuite/ -dict=../dictionaries/{{target_name}}.dict"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
echo "  3. 🐛 Start fuzzing: afl-fuzz -i ../testsuite -o findings -- {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}}"
{{/if}}
{{#if (eq default_fuzzer "honggfuzz")}}
echo "  3. 🐛 Start fuzzing: honggfuzz -i ../testsuite/ -W corpus/ -- {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}}"
{{/if}}
{{#if (eq default_fuzzer "standalone")}}
echo "  3. 🐛 Start fuzzing: {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}} ../testsuite/"
{{/if}}
echo ""
echo "📖 For detailed integration guidance, see ../INTEGRATION.md"
echo ""

# Quick smoke test
echo "🧪 Running quick smoke test..."
{{#if (eq integration "cmake")}}
cd build
if echo "TEST" | timeout 5s ./{{target_name}}_{{default_fuzzer}} 2>/dev/null; then
    echo "✅ Smoke test passed - fuzzer is working!"
else
    echo "⚠️ Smoke test had issues, but this is often normal for initial setup"
    echo "   Check that your harness in src/{{target_name}}.cpp handles the input correctly"
fi
{{else}}
if echo "TEST" | timeout 5s ./{{target_name}}-{{default_fuzzer}} 2>/dev/null; then
    echo "✅ Smoke test passed - fuzzer is working!"
else
    echo "⚠️ Smoke test had issues, but this is often normal for initial setup"
    echo "   Check that your harness in src/{{target_name}}.cpp handles the input correctly"
fi
{{/if}}

echo ""
echo "🚀 Ready to fuzz! Happy bug hunting! 🐛"