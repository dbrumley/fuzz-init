#!/bin/bash
# Auto-configuration script for {{project_name}} fuzzing
# Generated by fuzz-init for {{default_fuzzer}} with {{integration}} integration

set -e

echo "🔧 Configuring fuzzing for {{project_name}}..."
echo ""

# Determine script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
cd "$SCRIPT_DIR"

{{#if (eq integration "cmake")}}
# CMake Integration Setup
echo "📋 Setting up CMake build..."

# Create build directory
if [ ! -d "build" ]; then
    mkdir build
    echo "✓ Created build directory"
else
    echo "✓ Using existing build directory"
fi

cd build

# Configure CMake with parent project context
echo "🔍 Configuring CMake (this may take a moment)..."
{{#if (eq default_fuzzer "libfuzzer")}}
# Ensure we use clang++ for libFuzzer
export CC=clang
export CXX=clang++
echo "✓ Set compilers: CC=$CC, CXX=$CXX"
{{/if}}

# Run CMake configuration
cmake -S .. -B . || {
    echo ""
    echo "❌ CMake configuration failed!"
    echo ""
    echo "Common solutions:"
    echo "  1. Make sure your parent project has been configured:"
    echo "     cd .. && cmake -S . -B build"
    echo "  2. Check that required compilers are installed:"
{{#if (eq default_fuzzer "libfuzzer")}}
    echo "     - clang++ (required for libFuzzer)"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
    echo "     - afl-clang-fast++ (install AFL++)"
{{/if}}
    echo "  3. See INTEGRATION.md for detailed troubleshooting"
    echo ""
    exit 1
}

echo "✓ CMake configuration successful"

# Initial build to verify setup
echo ""
echo "🏗️ Building fuzzer to verify setup..."
TARGET_NAME="{{target_name}}_{{default_fuzzer}}"

cmake --build . --target "$TARGET_NAME" || {
    echo ""
    echo "❌ Build failed!"
    echo ""
    echo "This often indicates a sanitizer mismatch. Try:"
    echo "  1. Rebuild your main project with AddressSanitizer:"
    echo "     cd ../.. && cmake -S . -B build-asan -DCMAKE_CXX_FLAGS='-fsanitize=address -g'"
    echo "  2. Reconfigure this fuzzer to use the sanitizer build:"
    echo "     cmake -S .. -B . -DPARENT_BUILD_DIR=../../build-asan"
    echo "  3. See ../INTEGRATION.md for complete instructions"
    echo ""
    exit 1
}

echo "✓ Build successful: $TARGET_NAME"

{{else}}
# Makefile Integration Setup
echo "📋 Setting up Makefile build..."

# Check for required library in parent directory
REQUIRED_LIB="../lib{{project_name}}-{{default_fuzzer}}.a"
if [ ! -f "$REQUIRED_LIB" ]; then
    echo "⚠️ Required library not found: $REQUIRED_LIB"
    echo ""
    echo "Please build the fuzzing library first:"
    echo "  cd .. && make lib-{{default_fuzzer}}"
    echo ""
    echo "This ensures consistent sanitizer instrumentation."
    echo "See INTEGRATION.md for details."
    echo ""
    exit 1
fi

echo "✓ Found required library: $REQUIRED_LIB"

# Build the fuzzer
echo ""
echo "🏗️ Building fuzzer..."
make clean 2>/dev/null || true  # Clean any previous builds, ignore errors
make {{target_name}}-{{default_fuzzer}} || {
    echo ""
    echo "❌ Build failed!"
    echo ""
    echo "Common solutions:"
    echo "  1. Ensure parent library was built with same compiler/flags"
    echo "  2. Check compiler availability:"
{{#if (eq default_fuzzer "libfuzzer")}}
    echo "     - clang++ (required for libFuzzer)"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
    echo "     - afl-clang-fast++ (install AFL++)"
{{/if}}
    echo "  3. See INTEGRATION.md for troubleshooting"
    echo ""
    exit 1
}

echo "✓ Build successful: {{target_name}}-{{default_fuzzer}}"
{{/if}}

# Final setup and guidance
echo ""
echo "✅ Setup complete!"
echo ""
echo "🎯 Your fuzzer is ready:"
{{#if (eq integration "cmake")}}
echo "  📁 Binary: build/{{target_name}}_{{default_fuzzer}}"
echo "  🏃 Test run: ./{{target_name}}_{{default_fuzzer}} ../testsuite/"
{{else}}
echo "  📁 Binary: {{target_name}}-{{default_fuzzer}}"
echo "  🏃 Test run: ./{{target_name}}-{{default_fuzzer}} testsuite/"
{{/if}}
echo ""
echo "🎯 Next steps:"
echo "  1. ✏️ Customize src/{{target_name}}.cpp for your API"
{{#if (eq integration "cmake")}}
echo "  2. 🛡️ Consider rebuilding parent with sanitizers (see ../INTEGRATION.md)"
{{else}}
echo "  2. 🛡️ Ensure parent was built with lib-{{default_fuzzer}} target for sanitizers"
{{/if}}
{{#if (eq default_fuzzer "libfuzzer")}}
echo "  3. 🐛 Start fuzzing: {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}} ../testsuite/ -dict=../dictionaries/{{target_name}}.dict"
{{/if}}
{{#if (eq default_fuzzer "afl")}}
echo "  3. 🐛 Start fuzzing: afl-fuzz -i ../testsuite -o findings -- {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}}"
{{/if}}
{{#if (eq default_fuzzer "honggfuzz")}}
echo "  3. 🐛 Start fuzzing: honggfuzz -i ../testsuite/ -W corpus/ -- {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}}"
{{/if}}
{{#if (eq default_fuzzer "standalone")}}
echo "  3. 🐛 Start fuzzing: {{#if (eq integration "cmake")}}./{{target_name}}_{{default_fuzzer}}{{else}}./{{target_name}}-{{default_fuzzer}}{{/if}} ../testsuite/"
{{/if}}
echo ""
echo "📖 For detailed integration guidance, see ../INTEGRATION.md"
echo ""

# Quick smoke test
echo "🧪 Running quick smoke test..."
{{#if (eq integration "cmake")}}
cd build
if echo "TEST" | timeout 5s ./{{target_name}}_{{default_fuzzer}} 2>/dev/null; then
    echo "✅ Smoke test passed - fuzzer is working!"
else
    echo "⚠️ Smoke test had issues, but this is often normal for initial setup"
    echo "   Check that your harness in src/{{target_name}}.cpp handles the input correctly"
fi
{{else}}
if echo "TEST" | timeout 5s ./{{target_name}}-{{default_fuzzer}} 2>/dev/null; then
    echo "✅ Smoke test passed - fuzzer is working!"
else
    echo "⚠️ Smoke test had issues, but this is often normal for initial setup"
    echo "   Check that your harness in src/{{target_name}}.cpp handles the input correctly"
fi
{{/if}}

echo ""
echo "🚀 Ready to fuzz! Happy bug hunting! 🐛"