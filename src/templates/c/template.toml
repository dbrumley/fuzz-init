# Template metadata for C fuzzing project
[template]
name = "C"
description = "C fuzzing"
version = "1.0.0"

# Template variables with defaults
[variables]
project_name = { required = true, description = "Name of the fuzzing project" }
target_name = { default = "target1", description = "Name of the fuzz target" }

# Supported integration types
[integrations]
supported = ["make", "cmake"]
default = "cmake"

[[integrations.options]]
name = "make"
description = "Makefile-based build system integration"

[[integrations.options]]
name = "cmake"
description = "CMake-based build system integration"

# File conventions - smart defaults based on directory and extension
[file_conventions]
# Directories always included (core fuzz files)
always_include = ["fuzz"]

# Directories only in full mode (tutorial/example content)
full_mode_only = ["src", "include", "test", "test_data"]

# File extensions that should be templated
template_extensions = [".c", ".h", ".md", ".sh", ".txt"]

# File extensions that should not be templated
no_template_extensions = [".dict", ".bin"]

# ===== FILE CONFIGURATIONS =====

# Integration-specific fuzz files
[[files]]
condition = "integration == 'make'"
paths = ["fuzz/Makefile"]

[[files]]
condition = "integration == 'cmake'"
paths = [
    "fuzz/CMakeLists.txt",
    "fuzz/cmake/afl.cmake",
    "fuzz/cmake/honggfuzz.cmake", 
    "fuzz/cmake/libfuzzer.cmake",
    "fuzz/cmake/standalone.cmake"
]

# Root-level build files (full mode only)
[[files]]
condition = "integration == 'make' && minimal == false"
paths = ["Makefile"]

[[files]]
condition = "integration == 'cmake' && minimal == false"
paths = ["CMakeLists.txt", "CMakePresets.json"]

# CMake presets for minimal mode
[[files]]
condition = "integration == 'cmake' && minimal == true"
paths = ["fuzz/CMakePresets.json"]

# Executable scripts (full mode only)
[[files]]
condition = "minimal == false"
paths = ["fuzz.sh"]
executable = true
template = true

# Tutorial and documentation (full mode only)
[[files]]
condition = "minimal == false"
paths = ["TUTORIAL.md", "Dockerfile"]

# Dictionary file - uses template for filename but not content
[[files]]
path = "fuzz/dictionaries/{{target_name}}.dict"
template = true 

# ===== DIRECTORY CONFIGURATIONS =====

[[directories]]
path = "fuzz/testsuite/{{target_name}}"
create_empty = true  # Create empty directory for corpus files

# ===== POST-GENERATION MESSAGE =====

[post_generation_message]
content = """
üéØ {{project_name}} C Fuzzing Project Created!

{{#if minimal}}
   Your fuzzing harness is ready in the fuzz directory. 
{{else}}
üìÅ Full mode: Complete project with example library and fuzzing setup.
{{/if}}

üöÄ Quick Start:
{{#if minimal}}
1. cd {{project_name}}/fuzz
2. Edit src/fuzz_harness_1.c to fuzz your actual code
3. {{#if (eq integration 'make')}}make{{else if (eq integration 'cmake')}}cmake --preset fuzz-libfuzzer && cmake --build --preset fuzz-libfuzzer{{/if}}
{{else}}
1. cd {{project_name}}
2. {{#if (eq integration 'make')}}make && make fuzz{{else if (eq integration 'cmake')}}cmake --preset fuzz-libfuzzer && cmake --build --preset fuzz-libfuzzer{{/if}}
3. ./fuzz/build/fuzz_harness_1-libfuzzer fuzz/testsuite/
{{/if}}

üìö Documentation:
- README.md - Quick reference
{{#if minimal}}- INTEGRATION.md - How to integrate with your project{{else}}- TUTORIAL.md - Complete fuzzing tutorial{{/if}}

Happy fuzzing! üêõ
"""

# ===== VALIDATION COMMANDS =====

[validation]

# Full mode validation - CMake
[[validation.commands]]
name = "cmake-full"
condition = "integration == 'cmake' && minimal == false"
dir = "{{project_dir}}"
steps = [
    ["./fuzz.sh", "build"]
]
verify_files = [
    "build/libfuzzer/bin/fuzz_harness_1-libfuzzer",
    "build/afl/bin/fuzz_harness_1-afl",
    "build/honggfuzz/bin/fuzz_harness_1-honggfuzz",
    "build/standalone/bin/fuzz_harness_1-native"
]

# Full mode validation - Make
[[validation.commands]]
name = "make-full"
condition = "integration == 'make' && minimal == false"
dir = "{{project_dir}}"
steps = [
    ["./fuzz.sh", "build"]
]
# At least standalone should always be built
verify_files = [
    "fuzz/build/fuzz_harness_1-standalone"
]

# Minimal mode validation - CMake
[[validation.commands]]
name = "cmake-minimal"
condition = "integration == 'cmake' && minimal == true"
dir = "{{project_dir}}/fuzz"
steps = [
    ["cmake", "--preset", "fuzz-libfuzzer"],
    ["cmake", "--build", "--preset", "fuzz-libfuzzer"],
    ["cmake", "--preset", "fuzz-afl"],
    ["cmake", "--build", "--preset", "fuzz-afl"],
    ["cmake", "--preset", "fuzz-honggfuzz"],
    ["cmake", "--build", "--preset", "fuzz-honggfuzz"],
    ["cmake", "--preset", "fuzz-standalone"],
    ["cmake", "--build", "--preset", "fuzz-standalone"]
]
verify_files = [
    "build/libfuzzer/bin/fuzz_harness_1-libfuzzer",
    "build/afl/bin/fuzz_harness_1-afl",
    "build/honggfuzz/bin/fuzz_harness_1-honggfuzz",
    "build/standalone/bin/fuzz_harness_1-native"
]

# Minimal mode validation - Make
[[validation.commands]]
name = "make-minimal"
condition = "integration == 'make' && minimal == true"
dir = "{{project_dir}}/fuzz"
steps = [
    ["make"]
]
# At least standalone should always be built
verify_files = [
    "build/fuzz_harness_1-standalone"
]