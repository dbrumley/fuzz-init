# Template metadata for C fuzzing project
[template]
name = "c"
description = "C/C++ fuzzing project with libFuzzer and AddressSanitizer"
version = "1.0.0"

# Template variables with defaults
[variables]
project_name = { required = true, description = "Name of the fuzzing project" }
target_name = { default = "target1", description = "Name of the fuzz target" }

# Supported fuzzers for this template
[fuzzers]
supported = ["afl", "libfuzzer", "hongfuzz", "standalone"]
default = "libfuzzer"

[[fuzzers.options]]
name = "afl"
display_name = "AFL/AFL++"
description = "Best for applications"
requires = "requires AFL or AFL++"

[[fuzzers.options]]
name = "libfuzzer"
display_name = "libFuzzer"
description = "Best for libraries"
requires = "requires clang with libFuzzer support"

[[fuzzers.options]]
name = "hongfuzz"
display_name = "HonggFuzz"
description = "Alternative to both AFL and libFuzzer"
requires = "requires honggfuzz"

[[fuzzers.options]]
name = "standalone"
display_name = "Standalone"
description = "Binary with no fuzzing support built-in"
requires = "no requirements"

# Supported integration types
[integrations]
supported = ["standalone", "make", "cmake"]
default = "make"

[[integrations.options]]
name = "standalone"
description = "Self-contained fuzzing setup with build script"
files = ["fuzz/build.sh"]

[[integrations.options]]
name = "make"
description = "Makefile-based build system integration"
files = ["fuzz/Makefile", "fuzz/INTEGRATION.md"]

[[integrations.options]]
name = "cmake"
description = "CMake-based build system integration"
files = ["fuzz/CMakeLists.txt", "fuzz/INTEGRATION.md"]

# File conventions - smart defaults based on directory and extension
[file_conventions]
# Directories always included (core fuzz files)
always_include = ["fuzz"]

# Directories only in full mode (tutorial/example content)
full_mode_only = ["src", "include"]

# File extensions that should be templated
template_extensions = [".c", ".h", ".md", ".sh", ".toml", ".txt"]

# File extensions that should be executable  
executable_extensions = [".sh"]

# File extensions that should not be templated
no_template_extensions = [".dict", ".bin"]

# Integration-specific files
[[files]]
path = "fuzz/build.sh"
condition = "integration == 'standalone'"
executable = true

[[files]]
path = "fuzz/Makefile"
condition = "integration == 'make'"

[[files]]
path = "fuzz/CMakeLists.txt"
condition = "integration == 'cmake'"

[[files]]
path = "fuzz/INTEGRATION.md"
condition = "integration == 'make' || integration == 'cmake'"

# Root-level build files (full mode only)
[[files]]
path = "Makefile"
condition = "integration == 'make' && minimal == false"

[[files]]
path = "CMakeLists.txt"
condition = "integration == 'cmake' && minimal == false"

[[files]]
path = "build.sh"
condition = "integration == 'standalone' && minimal == false"
executable = true

# Dictionary files should not be templated
[[files]]
path = "fuzz/dictionaries/{{target_name}}.dict"
template = false

# Root-level tutorial files (full mode only)
[[files]]
path = "TUTORIAL.md"
condition = "minimal == false" 

# Directory creation rules
[[directories]]
path = "fuzz/testsuite/{{target_name}}"
create_empty = true  # Create empty directory for corpus files



# Post-generation hooks (optional future feature)
[hooks]
# post_generate = ["chmod +x fuzz/build.sh"]